import json
import os
from openai import OpenAI

# the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
# do not change this unless explicitly requested by the user
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai = OpenAI(api_key=OPENAI_API_KEY)

def generate_letter_content(document_type, language, tone, sender_name, recipient_name, 
                          purpose, reason=None, date_range=None, additional_details=None):
    """
    Generate letter content using OpenAI GPT-4o (with demo fallback)
    """
    
    # Language mapping
    language_map = {
        'english': 'English',
        'hindi': 'Hindi (Devanagari script)',
        'marathi': 'Marathi (Devanagari script)'
    }
    
    # Tone mapping
    tone_map = {
        'formal': 'very formal and professional',
        'semi-formal': 'semi-formal and respectful',
        'friendly': 'friendly yet respectful'
    }
    
    # Build the prompt
    prompt = f"""
You are an expert letter and email writer. Generate a complete, professional {document_type.lower()} in {language_map.get(language, 'English')} with a {tone_map.get(tone, 'formal')} tone.

Document Details:
- Type: {document_type}
- From: {sender_name}
- To: {recipient_name}
- Purpose: {purpose}
"""
    
    if reason:
        prompt += f"- Reason/Context: {reason}\n"
    
    if date_range:
        prompt += f"- Date/Duration: {date_range}\n"
    
    if additional_details:
        prompt += f"- Additional Details: {additional_details}\n"
    
    prompt += f"""
Requirements:
1. Include proper letter format with sender/recipient details, date, subject, salutation, body, and closing
2. Use appropriate formal language for {document_type.lower()}
3. Include all necessary details and context
4. Make it professional and well-structured
5. Include proper spacing and formatting
6. Write in {language_map.get(language, 'English')} language
7. Maintain {tone_map.get(tone, 'formal')} tone throughout

Generate the complete letter content now:
"""
    
    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "You are a professional letter and document writer with expertise in formal communication across multiple languages. Generate complete, properly formatted letters that are appropriate for official and business use."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            max_tokens=1500,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        # If OpenAI API fails, return a demo letter instead
        if "quota" in str(e).lower() or "429" in str(e):
            return generate_demo_letter_content(document_type, language, tone, sender_name, recipient_name, purpose, reason, date_range, additional_details)
        else:
            raise Exception(f"Failed to generate letter content: {str(e)}")


def generate_demo_letter_content(document_type, language, tone, sender_name, recipient_name, 
                                purpose, reason=None, date_range=None, additional_details=None):
    """
    Generate demo letter content when OpenAI API is unavailable
    """
    from datetime import datetime
    
    current_date = datetime.now().strftime("%B %d, %Y")
    
    # Create a professional demo letter based on the document type
    if "scholarship" in document_type.lower():
        demo_content = f"""
{sender_name}
[Your Address]
[City, State, ZIP Code]
[Your Email]
[Your Phone Number]

{current_date}

{recipient_name}
[Organization Address]
[City, State, ZIP Code]

Subject: {document_type} - {purpose}

Dear {recipient_name},

I am writing to formally submit my application for the scholarship opportunity. I am {sender_name}, and I am seeking financial assistance to support my educational pursuits.

Purpose: {purpose}

{f"Reason/Context: {reason}" if reason else ""}

{f"Duration: {date_range}" if date_range else ""}

I am committed to academic excellence and believe that this scholarship will significantly contribute to achieving my educational goals. I have maintained a strong academic record and am actively involved in various extracurricular activities that demonstrate my leadership potential.

{f"Additional Information: {additional_details}" if additional_details else ""}

I would be grateful for your consideration of my application. I am available for any additional information or documentation you may require.

Thank you for your time and consideration.

Respectfully yours,

{sender_name}
[Signature]

---
This is a demo letter generated by Typemitr. For AI-powered content, please check your OpenAI API quota.
        """
    
    elif "leave" in document_type.lower():
        demo_content = f"""
{sender_name}
[Your Address]
[City, State, ZIP Code]
[Your Email]
[Your Phone Number]

{current_date}

{recipient_name}
[Organization Name]
[Address]

Subject: Application for Leave - {purpose}

Dear {recipient_name},

I am writing to formally request leave from [institution/organization] for the following reason: {purpose}.

{f"Reason: {reason}" if reason else ""}

{f"Duration: {date_range}" if date_range else "Leave period: [Please specify dates]"}

I understand the importance of my responsibilities and will ensure that all pending work is completed before my leave period. I will also make arrangements for any urgent matters that may arise during my absence.

{f"Additional Details: {additional_details}" if additional_details else ""}

I hope for your kind consideration and approval of my leave request. Please let me know if you require any additional documentation.

Thank you for your understanding.

Sincerely,

{sender_name}
[Signature]

---
This is a demo letter generated by Typemitr. For AI-powered content, please check your OpenAI API quota.
        """
    
    else:
        # Generic professional letter format
        demo_content = f"""
{sender_name}
[Your Address]
[City, State, ZIP Code]
[Your Email]
[Your Phone Number]

{current_date}

{recipient_name}
[Recipient Title]
[Organization Name]
[Address]

Subject: {document_type} - {purpose}

Dear {recipient_name},

I am writing to you regarding {purpose}. This {document_type.lower()} is submitted with complete information and documentation.

{f"Context: {reason}" if reason else ""}

{f"Timeline: {date_range}" if date_range else ""}

I believe that this request merits your consideration based on the circumstances outlined. I am committed to fulfilling all requirements and maintaining the highest standards of professionalism.

{f"Additional Information: {additional_details}" if additional_details else ""}

I look forward to your positive response and am available for any clarifications or additional information you may require.

Thank you for your time and consideration.

Respectfully,

{sender_name}
[Signature]

---
This is a demo letter generated by Typemitr. For AI-powered content, please check your OpenAI API quota.
        """
    
    return demo_content.strip()

def improve_letter_content(original_content, improvement_request):
    """
    Improve existing letter content based on user feedback
    """
    try:
        prompt = f"""
Please improve the following letter based on this request: {improvement_request}

Original Letter:
{original_content}

Provide the improved version while maintaining the original format and structure:
"""
        
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "You are an expert editor who improves letters and documents based on specific feedback while maintaining professional standards."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            max_tokens=1500,
            temperature=0.5
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        raise Exception(f"Failed to improve letter content: {str(e)}")
